// @generated by protoc-gen-connect-es v0.13.0 with parameter "target=js"
// @generated from file bilibili/broadcast/v1/broadcast.proto (package bilibili.broadcast.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { AuthReq, AuthResp, BroadcastFrame, HeartbeatReq, HeartbeatResp, MessageAckReq, TargetPath } from "./broadcast_pb.js";
import { Empty, MethodKind } from "@bufbuild/protobuf";

/**
 * broadcast操作，对应每个target_path
 *
 * @generated from service bilibili.broadcast.v1.Broadcast
 */
export const Broadcast = {
  typeName: "bilibili.broadcast.v1.Broadcast",
  methods: {
    /**
     * 用户鉴权
     *
     * @generated from rpc bilibili.broadcast.v1.Broadcast.Auth
     */
    auth: {
      name: "Auth",
      I: AuthReq,
      O: AuthResp,
      kind: MethodKind.Unary,
    },
    /**
     * 心跳保活：成功心跳为4分45秒，重试心跳为30s，三次收不到进行重连（不超过5分45）
     *
     * @generated from rpc bilibili.broadcast.v1.Broadcast.Heartbeat
     */
    heartbeat: {
      name: "Heartbeat",
      I: HeartbeatReq,
      O: HeartbeatResp,
      kind: MethodKind.Unary,
    },
    /**
     * 订阅target_path
     *
     * @generated from rpc bilibili.broadcast.v1.Broadcast.Subscribe
     */
    subscribe: {
      name: "Subscribe",
      I: TargetPath,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * 取消订阅target_path
     *
     * @generated from rpc bilibili.broadcast.v1.Broadcast.Unsubscribe
     */
    unsubscribe: {
      name: "Unsubscribe",
      I: TargetPath,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * 消息回执
     *
     * @generated from rpc bilibili.broadcast.v1.Broadcast.MessageAck
     */
    messageAck: {
      name: "MessageAck",
      I: MessageAckReq,
      O: Empty,
      kind: MethodKind.Unary,
    },
  }
};

/**
 * broadcast连接隧道
 *
 * @generated from service bilibili.broadcast.v1.BroadcastTunnel
 */
export const BroadcastTunnel = {
  typeName: "bilibili.broadcast.v1.BroadcastTunnel",
  methods: {
    /**
     * 创建双向stream连接隧道
     *
     * @generated from rpc bilibili.broadcast.v1.BroadcastTunnel.CreateTunnel
     */
    createTunnel: {
      name: "CreateTunnel",
      I: BroadcastFrame,
      O: BroadcastFrame,
      kind: MethodKind.BiDiStreaming,
    },
  }
};

